<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, November 07, 2023, 7:42 AM -->
<!-- MuClient version 5.06 -->

<!-- Plugin "GuinnessTools" generated by Plugin Wizard -->

<muclient>
<plugin
   name="GuinnessTools"
   author="Robbo"
   id="4df531891997d30ab67e9b94"
   language="Lua"
   purpose="Guinness's Imm Builder tools"
   save_state="y"
   date_written="2023-11-07 07:41:46"
   requires="5.06"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!-- Triggers  -->
<triggers>
  <trigger
   name="gagMpdumpHeaders"
   enabled="n"
   match="^@Y"
   regexp="y"
   omit_from_output="y"
   omit_from_log="y"
   sequence="101"
  >
  </trigger>
  <trigger
   name="allowMpdumpHeader"
   enabled="n"
   match="^@YMobprog Id@w: (.+)"
   regexp="y"
   omit_from_output="y"
   omit_from_log="y"
   sequence="100"
   script = "rewriteMpdumpHeader"
  >
  </trigger>

</triggers>



<!--  Aliases  -->

<aliases>
  <alias
   match="garea *"
   enabled="y"
   script="setArea"
   sequence="100"
  >
  </alias>
  <alias
   match="ggo"
   enabled="y"
   script="ggoNext"
   sequence="101"
  >
  </alias>
  <alias
   match="ggo *"
   enabled="y"
   script="ggoParam"
   sequence="100"
  >
  </alias>
  <alias
   match="gmgo"
   enabled="y"
   script="gmgoNext"
   sequence="101"
  >
  </alias>
  <alias
   match="gmgo *"
   enabled="y"
   script="gmgoParam"
   sequence="100"
  >
  </alias>

  <alias
   match="mstatall * *"
   enabled="y"
   script="mstatAll"
   sequence="101"
  >
  </alias>
  <alias
   match="mstatall * * *"
   enabled="y"
   script="mstatAll"
   sequence="100"
  >
  </alias>
  <alias
   match="rstatall * *"
   enabled="y"
   script="rstatAll"
   sequence="101"
  >
  </alias>
  <alias
   match="rstatall * * *"
   enabled="y"
   script="rstatAll"
   sequence="100"
  >
  </alias>
  <alias
   match="ostatall * *"
   enabled="y"
   script="ostatAll"
   sequence="101"
  >
  </alias>
  <alias
   match="ostatall * * *"
   enabled="y"
   script="ostatAll"
   sequence="100"
  >
  </alias>
  <alias
   match="mpdumpall *"
   enabled="y"
   script="mpdumpAll"
   sequence="101"
  >
  </alias>
  <alias
   match="mpdumpall * *"
   enabled="y"
   script="mpdumpAll"
   sequence="100"
  >
  </alias>

  <alias
   match="toolbox help"
   enabled="y"
   script="OnHelp"
   sequence="100"
  >
  </alias>


</aliases>

<script>
<![CDATA[
local wait = 0.8

function OnHelp()
   local help = [[

                      Test Port Toolbox Help
=============================================================================
 garea keyword             --> Set the area you're working in so you don't
                               need to type keywords
 ggo                       --> Alias for rgoto that increments the room vnum
                               you're in. Starts at 'rgoto 0'. (Guinness Go!)
 ggo #                     --> Sets ggo to # and goes!
 ggo reset                 --> Sets ggo back to 0.
 gmgo                      --> Alias for mgoto that increments the mob vnum
                               you're in. Starts at 'mgoto area-0'. (Guinness Go!)
 gmgo #                    --> Sets ggo to # and goes!
 gmgo reset                --> Sets ggo back to 0.

 mstatall # [#]            --> Dumps mstat for each mob in 'keyword' area,
                               counting from 0 to #.
 rstatall # [#]            --> Dumps rstat for each room in 'keyword' area,
                               counting from 0 to #.
 ostatall # [#]            --> Dumps ostat for each room in 'keyword' area,
                               counting from 0 to #. The object is loaded
                               before ostat.
 mpdumpall # [#]           --> Does mpdump of all programs 0 to N.
                               Uses rawcolor mode and noline.
 meditall # [#]            --> Similar to mstatall, dumps mob editor
                               details.
 reditall # [#]            --> Similar to rstatall, dumps room editor
                               details.
 oeditall # [#]            --> Similar to rstatall, dumps room editor
                               details.
 toolbox help              --> Show this help file
]]

  print(help)
end

function rewriteMpdumpHeader(name,line,wildcards)
   local mpkey = wildcards[1]
   WriteLog("Dumping mobprog: "..mpkey)
   Note("Dumping mobprog: "..mpkey)
end


function ggoNext()
  local area = GetVariable("garea")
   if area == nil then Note("Set your area keyword with 'garea keyword' first!") return end
    -- Figure out our current room
   ggoCurrent = GetVariable("ggoNext")
   if ggoCurrent == nil then ggoCurrent = 0 end
   ggoCurrent = tonumber(ggoCurrent)

   Send("rgoto "..area.."-"..ggoCurrent)
   ggoCurrent = ggoCurrent + 1
   SetVariable("ggoNext",tostring(ggoCurrent))
end

function ggoParam(name,line,wildcards)
   local p = wildcards[1]
   if p == "reset" then
      DeleteVariable("ggoNext")
   else
      SetVariable("ggoNext",p)
      ggoNext()
   end
end

function setArea(name,line,wildcards)
   -- Which area is Guinness working in?
   SetVariable("garea",wildcards[1])
end

function gmgoNext()
   local area = GetVariable("garea")
   if area == nil then Note("Set your area keyword with 'garea keyword' first!") return end
   -- Figure out our current mob
   gmgoCurrent = GetVariable("gmgoNext")
   if gmgoCurrent == nil then gmgoCurrent = 0 end
   gmgoCurrent = tonumber(gmgoCurrent)

   Send("mgoto "..area.."-"..gmgoCurrent)
   gmgoCurrent = gmgoCurrent + 1
   SetVariable("gmgoNext",tostring(gmgoCurrent))
end

function gmgoParam(name,line,wildcards)
   local p = wildcards[1]
   if p == "reset" then
      DeleteVariable("gmgoNext")
   else
      SetVariable("gmgoNext",p)
      gmgoNext()
   end
end


function rstatAll(name, line, wildcards)
   local area = GetVariable("garea")
   if area == nil then Note("Set your area keyword with 'garea keyword' first!") return end
   local min = 0
   local max = 0
   if #wildcards == 1 then
      max = tonumber(wildcards[1])
   else
      min = tonumber(wildcards[1])
      max = tonumber(wildcards[2])
   end
   local delay = wait
   local logfile = "rstat_"..area..".txt"
   local logEnabled = false
   if IsLogOpen() == true then
      logEnabled = true
      CloseLog()
   end
   OpenLog(logfile,false)
   Send("prompt")
   for i = min,max do
      DoAfter(delay,"rstat "..area.."-"..i)
      delay = delay + wait
   end
   DoAfter(delay,"prompt")
   delay = delay + 3
   DoAfterSpecial(delay,'CloseLog()',sendto.script)
   if logEnabled == true then
      delay = delay + wait
      DoAfterSpecial(delay,'OpenLog("",true)',sendto.script)
   end
end

function mstatAll(name, line, wildcards)
   local area = GetVariable("garea")
   if area == nil then Note("Set your area keyword with 'garea keyword' first!") return end
   local min = 0
   local max = 0
   if #wildcards == 1 then
      max = tonumber(wildcards[1])
   else
      min = tonumber(wildcards[1])
      max = tonumber(wildcards[2])
   end
   local delay = wait
   local logfile = "mstat_"..area..".txt"
   local logEnabled = false
   if IsLogOpen() == true then
      logEnabled = true
      CloseLog()
   end
   OpenLog(logfile,false)
   Send("prompt")
   for i = min,max do
      DoAfter(delay,"mstat "..area.."-"..i)
      delay = delay + wait
   end
   DoAfter(delay,"prompt")
   delay = delay + 3
   DoAfterSpecial(delay,'CloseLog()',sendto.script)
   if logEnabled == true then
      delay = delay + wait
      DoAfterSpecial(delay,'OpenLog("",true)',sendto.script)
   end

end

function ostatAll(name, line, wildcards)
   local area = GetVariable("garea")
   if area == nil then Note("Set your area keyword with 'garea keyword' first!") return end
   local min = 0
   local max = 0
   if #wildcards == 1 then
      max = tonumber(wildcards[1])
   else
      min = tonumber(wildcards[1])
      max = tonumber(wildcards[2])
   end
   local delay = wait
   local logfile = "ostat_"..area..".txt"
   local logEnabled = false
   if IsLogOpen() == true then
      logEnabled = true
      CloseLog()
   end
   OpenLog(logfile,false)
   Send("prompt")
   for i = min,max do
      DoAfter(delay,"oload "..area.."-"..i)
      delay = delay + wait
      DoAfter(delay,"ostat "..area.."-"..i.." world")
      delay = delay + wait
   end
   DoAfter(delay,"prompt")
   delay = delay + 3
   DoAfterSpecial(delay,'CloseLog()',sendto.script)
   if logEnabled == true then
      delay = delay + wait
      DoAfterSpecial(delay,'OpenLog("",true)',sendto.script)
   end

end

function mpdumpAll(name, line, wildcards)
   -- Add some triggers to gag Flags, size, old vnum, etc and replace the Mobprog Id line.
   -- Single trigger matching on ^@Y would work, actually!
   local area = GetVariable("garea")
   if area == nil then Note("Set your area keyword with 'garea keyword' first!") return end
   local min = 0
   local max = 0
   if #wildcards == 1 then
      max = tonumber(wildcards[1])
   else
      min = tonumber(wildcards[1])
      max = tonumber(wildcards[2])
   end
   local delay = wait
   EnableTrigger("gagMpdumpHeaders",true)
   EnableTrigger("allowMpdumpHeader",true)
   local logfile = "mpdump_"..area..".txt"
   local logEnabled = false
   if IsLogOpen() == true then
      logEnabled = true
      CloseLog()
   end
   OpenLog(logfile,false)

   Send("rawcolor")
   Send("prompt")
   for i = min,max do
      DoAfter(delay,"mpdump "..area.."-"..i.." noline")
      delay = delay + wait
   end
   DoAfter(delay,"rawcolor")
   delay = delay + wait
   DoAfter(delay,"prompt")
   delay = delay + wait
   DoAfterSpecial(delay,'EnableTrigger("gagMpdumpHeaders",false)',sendto.script)
   DoAfterSpecial(delay,'EnableTrigger("allowMpdumpHeader",false)',sendto.script)
   delay = delay + 3
   DoAfterSpecial(delay,'CloseLog()',sendto.script)
   if logEnabled == true then
      delay = delay + wait
      DoAfterSpecial(delay,'OpenLog("",true)',sendto.script)
   end

end

]]>
</script>

</muclient>
