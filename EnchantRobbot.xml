<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, February 28, 2023, 6:00 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "EnchantRobbot" generated by Plugin Wizard -->

<muclient>
<plugin
   name="EnchantRobbot"
   author="Robbo"
   id="40d97223fd0663197d9378d5"
   language="Lua"
   purpose="Enchanting Gear one item at a time"
   save_state="y"
   date_written="2023-02-28 17:58:40"
   requires="5.07"
   version="1.0"
   >
<description trim="y">
<![CDATA[
This plugin is to allow for one-command enchanting of items, sorting items into a keep bag that meet minimum DR/stats.
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   match="^(.*?) starts to glow brightly as you infuse it with holy magic\.$"
   regexp="y"
   script="watchPrompt"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="* begins to hum softly."
   regexp="n"
   script="watchPrompt"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You solidify (.*?) making it visible again\.$"
   regexp="y"
   script="watchPrompt"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^(.*?) is not invisible\.$"
   regexp="y"
   script="successSolidify"
   sequence="100"
  >
  </trigger>
  <trigger
   name="trg_successSolidify"
   enabled="y"
   match="* enhancing its power."
   script="successSolidify"
   regexp="n"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^(.*?) is already glowing\.$"
   regexp="y"
   script="successIlluminate"
   sequence="100"
  >
  </trigger>
  <trigger
   name="trg_successIlluminate"
   enabled="y"
   match="* enhancing its power."
   script="successIlluminate"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^(.*?) is already humming gently\.$"
   script="successResonate"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="* blessing it with fortune."
   script="successResonate"
   regexp="n"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="Your enchanting skills feel more focused."
   script="setFocusUp"
   regexp="n"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="Spell   : Enchanters focus (*)"
   script="setFocusUp"
   regexp="n"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="Your enchanters focus fades."
   script="setFocusDown"
   regexp="n"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="Unsatisfied with your focus, you darken *"
   script="recastIlluminate"
   regexp="n"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="Unsatisfied with your focus, you return *"
   script="recastSolidify"
   regexp="n"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="Unsatisfied with your focus, you silence *"
   script="recastResonate"
   regexp="n"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="You do not have that item."
   script="abortNoItem"
   regexp="n"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="* does not have that item for sale."
   script="abortNotForSale"
   regexp="n"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="* does not have that item for sale."
   script="abortNotForSale"
   regexp="n"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="There is no shopkeeper here."
   script="abortNoShopkeeper"
   regexp="n"
   sequence="100"
  >
  </trigger>
  <trigger
   name="grabEnchants1"
   enabled="n"
   match="\| (Solidify|Illuminate|Resonate)\s+: (Damage roll|Hit roll|Strength|Dexterity|Intelligence|Wisdom|Constitution|Luck) \+(\d+)"
   script="grabEnchants"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   name="grabEnchants2"
   enabled="n"
   match="\|\s+: (Damage roll|Hit roll|Strength|Dexterity|Intelligence|Wisdom|Constitution|Luck) \+(\d+)"
   script="grabEnchants"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   name="trigger_prompt"
   enabled="n"
   match="^\["
   script="matchedPrompt"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   name="endID"
   enabled="n"
   match="^\+-----------------------------------------------------------------\+"
   script="evaluateItem"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   name="grabId"
   enabled="n"
   match="^\| Id\s+: (\d+)"
   script="recordId"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   name="grabScore"
   enabled="n"
   match="^\| Score\s+: (\d+)"
   script="recordScore"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   name="grabItemCount"
   enabled="n"
   match="^You get (\d+) \* .+.$"
   script="doItemSort"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   name="grabItemSingle"
   enabled="n"
   match="^You get (\D).+.$"
   script="doItemSort"
   regexp="y"
   sequence="100"
  >
  </trigger>
  <trigger
   name="abortSort"
   enabled="n"
   match="^You do not see that in .+"
   script="doCancelSort"
   regexp="y"
   sequence="100"
  >
  </trigger>


</triggers>

<!--  Variables  -->

<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="ebot help"
   enabled="y"
  >
  </alias>
  <alias
   match="ebot enchant *"
   script="enchantStart"
   enabled="y"
   >
  </alias>
  <alias
   match="ebot enchant"
   script="enchantStart"
   enabled="y"
   >
  </alias>
  <alias
   match="ebot mindr *"
   script="setMinDR"
   enabled="y"
   >
   </alias>
  <alias
   match="ebot minstats *"
   script="setAddStats"
   enabled="y"
   >
   </alias>
   <alias
   match="ebot keepbag *"
   script="setKeepBag"
   enabled="y"
   >
   </alias>
   <alias
   match="ebot tossbag *"
   script="setTossBag"
   enabled="y"
   >
   </alias>
   <alias
   match="ebot setitem *"
   script="setKeyword"
   enabled="y"
   >
   </alias>
   <alias
   match="ebot id"
   script="idItem"
   enabled="y"
   >
   </alias>
   <alias
   match="ebot bagjunk"
   script="toggleBagJunk"
   enabled="y"
   >
   </alias>
   <alias
   match="ebot config"
   script="showConfig"
   enabled="y"
   >
   </alias>
   <alias
   match="ebot reset"
   script="doReset"
   enabled="y"
   >
   </alias>
   <alias
   match="sorteq (\S+) (\S+)"
   regexp="y"
   script="startSort"
   enabled="y"
   >
   </alias>
   <alias
   match="geteqset (\S+) (\S+)"
   regexp="y"
   script="unbagEq"
   enabled="y"
   >
   </alias>
   <alias
   match="puteqset (\S+) (\S+)"
   regexp="y"
   script="bagEq"
   enabled="y"
   >
   </alias>
   <alias
   match="sorteqset (\S+) (\S+)"
   regexp="y"
   script="sortEqSet"
   enabled="y"
   >
   </alias>
   <alias
   match="sortnext"
   regexp="n"
   script="sortNextWearable"
   enabled="y"
   >
   </alias>
   <alias
   match="cancelsort"
   regexp="n"
   script="cancelSortEq"
   enabled="y"
   >
   </alias>


</aliases>

<script>
<![CDATA[
Note("Initializing EnchantBot(ebot) Plugin...")
castIlluminate = 0
castResonate = 0
castSolidify = 0
landedIlluminate = 0
landedResonate = 0
landedSolidify = 0
recastIlluminate = 0
recastResonate = 0
recastSolidify = 0
enchantRunning = 0
currentSpell = ""
keeperCount = 0
itemKeyword = ""
idSpell = ""
focusUp = 0
sortRunning = 0
sortTotal = 0
sortCount = 0
sortKeyword = ""
sortBag = ""
sortID = ""
identifiedItems = {}
sortedItems = {}
addedStats = {}
totalAdded = {}
wearables = {"light","head","eyes","ear","ear","neck","neck","back","torso","body","waist","arms","wrist","wrist","hands","finger","finger","legs","feet","hold","float"}
uniqueWearables = {"light","head","eyes","ear","neck","back","torso","body","waist","arms","wrist","hands","finger","legs","feet","hold","float"}
sortWearables = {}
sortPrefix = ""
-- Persistent variables
keepBag = GetVariable("keepBag")
tossBag = GetVariable("tossBag")
minDR = tonumber(GetVariable("minDR"))
minAddStats = tonumber(GetVariable("minAddStats"))
bagJunk = GetVariable("bagJunk")
-- Defaults
if minDR == nil then minDR = 8 end
if minAddStats == nil then minAddStats = 8 end
if keepBag == nil then keepBag = "bag" end
if tossBag == nil then tossBag = "2.bag" end
if bagJunk == nil then bagJunk = "false" end


function OnPluginInstall()
   Send("saf focus")
end

function OnHelp ()
   local help = [[
                       EnchantBot Help
=============================================================================
 ebot help                 --> Show help
 ebot config               --> Show configured settings
 ebot enchant <keyword>    --> Enchant an item
 ebot enchant              --> Repeat last enchant
 ebot reset                --> Reset running state if things get weird
 ---------------------------------------------------------------------------
                  Configuration Commands
 ebot mindr                --> Set minimum DR for an item
 ebot minstats             --> Set minimum additional stats for an item
 ebot keepbag <keyword>    --> Set bag to store 'keeper' items
 ebot tossbag <keyword>    --> Set bag to store junk items
 ebot bagjunk              --> Toggle bagging of junk items
 ebot setitem <keyword>    --> Optionally, set item keyword to enchant
 	                             (you don't need to use ebot enchant <keyword>)
 ---------------------------------------------------------------------------
                      Utility Commands
 sorteq <keyword> <bag>  --> Sort items matching keyword by score and
 	                             re-order in bag.
 geteqset <prefix> <bag>   --> Pull a set starting with prefix from a bag
 	                             (all possible wear locations)
 puteqset <prefix> <bag>   --> Put a set starting with prefix into a bag
 	                             (all possible wear locations)
 cancelsort                --> Cancels set sort in progress
=============================================================================
 ebot enchant will:
 1) Buy item by keyword
 2) Enchant: Solidify first, then if DR met, will do additional spells
 3) 'keep' item if worthwhile, and bag it.
 4) If configured, bag junk item.

]]

  print(help)
end

function doReset()
   castIlluminate = 0
   castResonate = 0
   castSolidify = 0
   landedIlluminate = 0
   landedResonate = 0
   landedSolidify = 0
   recastIlluminate = 0
   recastResonate = 0
   recastSolidify = 0
   enchantRunning = 0
   currentSpell = ""
   itemKeyword = ""
   idSpell = ""
   focusUp = 0
   addedStats = {}
   totalAdded = {}
   keeperCount = 0
   sortRunning = 0
   sortTotal = 0
   sortCount = 0
   sortKeyword = ""
   sortBag = ""
   sortID = ""
   identifiedItems = {}
   sortedItems = {}
   Send("saf focus")
   Note("EnchantBot Plugin Reset!")
end

function enchantStart(name, line, wildcards)
   if enchantRunning == 1 then
      Note("Enchant is still running, please wait!")
      return
   end
   
   if #wildcards == 1 then
      if itemKeyword ~= wildcards[1] then
         keeperCount = 0
      end
      itemKeyword = wildcards[1]
   else
      if itemKeyword == "" then
         print("Item keyword not specified or previously set. Aborting.")
         return
      end
   end
   enchantRunning = 1
   if focusUp == 0 then
      ColourNote("red","black","WARNING: Focus is down!")
   end
   -- Init counters
   landedIlluminate = 0
   landedResonate = 0
   landedSolidify = 0
   -- Start with Solidify
   Send("buy "..itemKeyword)
   currentSpell = "Solidify"
   EnableTrigger("trg_successSolidify")
   EnableTrigger("trg_successIlluminate",false)
   Send("cast solidify "..itemKeyword)
end

function setCastIlluminate()
   castIlluminate = 1
end

function setCastSolidify()
   castSolidify = 1
end

function setCastResonate()
   castResonate = 1
end

function showConfig()
   print("Enchantbot Config:")
   print("Current Item   : "..itemKeyword)
   print("Minimum DR     : "..minDR)
   print("Minimum Stats  : "..minAddStats)
   print("Keep Bag       : "..keepBag)
   print("Toss Bag       : "..tossBag)
   print("Bag junk items : "..bagJunk)
end

function toggleBagJunk()
   if bagJunk == "false" then
      bagJunk = "true"
   else
      bagJunk = "false"
   end
   SetVariable("bagJunk",bagJunk)
   showConfig()
end

function successSolidify()
   EnableTrigger("trigger_prompt",false)
   castSolidify = 0
   landedSolidify = landedSolidify + 1
   Note("Landed Solidify, count: ".. landedSolidify)
   idItem()
end

function successIlluminate()
   EnableTrigger("trigger_prompt",false)
   castIlluminate = 0
   landedIlluminate = landedIlluminate + 1
   Note("Landed Illuminate, count: ".. landedIlluminate)
   idItem()
end

function successResonate()
   EnableTrigger("trigger_prompt",false)
   castResonate = 0
   landedResonate = landedResonate + 1
   Note("Landed Resonate, count: ".. landedResonate)
   idItem()
end

function recastResonate()
   EnableTrigger("trigger_prompt",false)
   if enchantRunning == 1 then Send("cast resonate "..itemKeyword) end
end

function recastSolidify()
   EnableTrigger("trigger_prompt",false)
   if enchantRunning == 1 then Send("cast solidify "..itemKeyword) end
end

function recastIlluminate()
   EnableTrigger("trigger_prompt",false)
   if enchantRunning == 1 then Send("cast illuminate "..itemKeyword) end
end

function matchedPrompt()
   if enchantRunning == 1 then
      Note("Failed to land "..currentSpell)
      EnableTrigger("trigger_prompt",false)
      if bagJunk == "true" then
         Send("put "..itemKeyword.." "..tossBag)
      end
      enchantComplete()
   end
end

function abortNoItem()
   if enchantRunning == 1 then
      Note("Enchantbot aborting, you don't have the item!")
      enchantComplete()
   end
end
      
function abortNotForSale()
   if enchantRunning == 1 then
      Note("Enchantbot aborting, shopkeeper doesn't have that item!")
      enchantComplete()
   end
end

function abortNoShopkeeper()
   if enchantRunning == 1 then
      Note("Enchantbot aborting, you're not at a shopkeeper!")
      enchantComplete()
   end
end

function setFocusUp()
   focusUp = 1
end

function watchPrompt()
   EnableTrigger("trigger_prompt")
end

function setFocusDown()
   focusUp = 0
end

function setKeyword(name, line, wildcards)
   itemKeyword = wildcards[1]
   print("Set keyword to be enchanted to: "..itemKeyword)
   keeperCount = 0
end

function setMinDR(name, line, wildcards)
   minDR = tonumber(wildcards[1])
   SetVariable("minDR",minDR)
   showConfig()
end

function setAddStats(name, line, wildcards)
   minAddStats = tonumber(wildcards[1])
   SetVariable("minDR",minAddStats)
   showConfig()
end

function setKeepBag(name, line, wildcards)
   keepBag = wildcards[1]
   SetVariable("keepBag",keepBag)
   showConfig()
end

function setTossBag(name, line, wildcards)
   tossBag = wildcards[1]
   SetVariable("tossBag",tossBag)
   showConfig()
end

function idItem()
   EnableTrigger("grabEnchants1",true)
   EnableTrigger("grabEnchants2",true)
   -- Init counters
   totalAdded = {}
   addedStats = {}
   -- ID the item
   Send("identify "..itemKeyword)
   --AddTimer ("ebotTimer", 0, 0, 4.5,"", timer_flag.Enabled + timer_flag.OneShot, "evaluateItem")
end

function grabEnchants(name, line, wildcards)
   local stat,amount
   if #wildcards == 2 then
      stat = wildcards[1]
      amount = wildcards[2]
   else
      idSpell = wildcards[1]
      stat = wildcards[2]
      amount = wildcards[3]
   end
   
   EnableTrigger("endID")
   addedStats[idSpell..":"..stat] = amount
   if totalAdded[idSpell] == nil then totalAdded[idSpell] = 0 end
   if stat ~= "Damage roll" and stat ~= "Hit roll" then
      totalAdded[idSpell] = totalAdded[idSpell] + amount
   end
end

function evaluateItem()
   EnableTrigger("endID",false)
   EnableTrigger("grabEnchants1",false)
   EnableTrigger("grabEnchants2",false)
   if not enchantRunning then return end

   --Check solidify first
   if currentSpell == "Solidify" then
      Note("Evaluating: Currentspell = Solidify")
      if addedStats["Solidify:Damage roll"] == nil then addedStats["Solidify:Damage roll"] = 0 end
      if addedStats["Solidify:Hit roll"] == nil then addedStats["Solidify:Hit roll"] = 0 end
      if landedSolidify == 1 and tonumber(addedStats["Solidify:Damage roll"]) < minDR then
         Send("disenchant "..itemKeyword.." "..currentSpell.." confirm")
         recastSolidify()
      return end
      if landedSolidify == 2 then EnableTrigger("trg_successSolidify",false) end
      if landedSolidify == 2 and tonumber(addedStats["Solidify:Damage roll"]) < minDR then
    	   Note("2 Attempts made at Solidify. Failed.")
    	   if bagJunk == "true" then
    	      Send("put "..itemKeyword.." "..tossBag)
    	   end
    	   enchantComplete()
      return end
      Note("Solidify complete. Casting illuminate.")
      EnableTrigger("trg_successSolidify",false)
      currentSpell = "Illuminate"
      EnableTrigger("trg_successIlluminate")
      Send("cast illuminate "..itemKeyword)
      return
   end
   if totalAdded[currentSpell] == nil then totalAdded[currentSpell] = 0 end
   if currentSpell == "Illuminate" then
      Note("Evaluating: Currentspell = Illuminate")
      -- Will recast if < 4 stats on illuminate
      if landedIlluminate == 1 and totalAdded[currentSpell] < 4 then
      	 Note("Total stats on first cast:"..totalAdded[currentSpell])
         Send("disenchant "..itemKeyword.." "..currentSpell.." confirm")
         recastIlluminate()
         return 
      end
      Note("Illuminate complete. Casting resonate.")
      EnableTrigger("trg_successIlluminate",false)
      currentSpell = "Resonate"
      Send("cast resonate "..itemKeyword)
      return
   end
   if currentSpell == "Resonate" then
      Note("Evaluating: Currentspell = Resonate")
      -- Will recast if < 3 stats on illuminate
      if landedResonate == 1 and totalAdded[currentSpell] < 3 then
         Send("disenchant "..itemKeyword.." "..currentSpell.." confirm")
         recastResonate()
         return
      end
   end
   if totalAdded["Resonate"] == nil then totalAdded["Resonate"] = 0 end
   if totalAdded["Illuminate"] == nil then totalAdded["Illuminate"] = 0 end
   
   if landedResonate == 1 and landedIlluminate == 1 and totalAdded["Resonate"] + totalAdded["Illuminate"] < minAddStats then
   	  Send("disenchant "..itemKeyword.." resonate confirm")
   	  Send("disenchant "..itemKeyword.." illuminate confirm")
   	  currentSpell = "Resonate"
   	  recastResonate()
   	  return
   end
   Note("Final checkout....")
   if totalAdded["Resonate"] + totalAdded["Illuminate"] < minAddStats then
 	   Note("Enchant complete... but item sucks!")
 	   if bagJunk == "true" then
 	      Send("put "..itemKeyword.." "..tossBag)
 	   end
 	   enchantComplete()
 	 else
 	   keeperCount = keeperCount + 1
 	   Note("Enchant Successful! Keeper count "..keeperCount)
 	   Note("Item DR:"..addedStats["Solidify:Damage roll"])
 	   Note("Added stats:"..totalAdded["Resonate"] + totalAdded["Illuminate"])
     Send("keep "..itemKeyword)
     Send("put "..itemKeyword.." "..keepBag)
     enchantComplete()
  end  
end

function enchantComplete()
   enchantRunning = 0
   EnableTrigger("grabEnchants1",false)
   EnableTrigger("grabEnchants2",false)
end

function startSort(name, line, wildcards)
   if sortRunning == 1 then
      Note("Sort is still running, please wait or reset!")
      return
   end
   
   if #wildcards ~= 2 then
      Note("Invalid Number of parameters - Usage: sortitem keyword bag")
      return
   end
   local
   
   sortRunning = 1
   sortTotal = 0
   sortCount = 0
   identifiedItems = {}
   sortedItems = {}
   
   EnableTrigger("grabID",true)
   EnableTrigger("grabScore",true)
   EnableTrigger("grabItemCount",true)
   EnableTrigger("grabItemSingle",true)
   EnableTrigger("abortSort",true)
   sortKeyword = wildcards[1]
   sortBag = wildcards[2]
   Send("take all."..sortKeyword.." "..sortBag)
end

function doCancelSort()
   sortRunning = 0
   Note("SortEq: No items found.")
   EnableTrigger("grabID",false)
   EnableTrigger("grabScore",false)
   EnableTrigger("grabItemCount",false)
   EnableTrigger("grabItemSingle",false)
   -- If sorting set, go on to the next one
   if (#sortWearables > 0) then 
      Note("SortEq: Queuing sort of next item in set...")
      DoAfterSpecial(2,"sortnext",10)
   end
   EnableTrigger("abortSort",false)
end

function doItemSort(name, line, wildcards)
   sortTotal = wildcards[1]
   if tonumber(sortTotal) == nil then
      sortTotal = 1
   end
   local delay = 0.2
   for x = 1,sortTotal do
      DoAfterSpecial(delay,"identify "..x.."."..sortKeyword,0)
      delay = delay + 0.4
   end
end

function recordId(name, line, wildcards)
   sortID = wildcards[1]
end

function recordScore(name, line, wildcards)
   -- Set ID,score key/value pair
   sortCount = sortCount + 1
   identifiedItems[sortCount] = { id = sortID, score = tonumber(wildcards[1]) }
   if tonumber(sortTotal) == sortCount then
      --sort ascending by score
      table.sort(identifiedItems, function(a,b) return a.score < b.score end)
      local delay = 0.2
      for i,item in ipairs(identifiedItems) do
         DoAfterSpecial(delay,"put "..item.id.." "..sortBag,0)
         delay = delay + 0.4
      end
      EnableTrigger("grabID",false)
      EnableTrigger("grabScore",false)
      EnableTrigger("grabItemCount",false)
      EnableTrigger("grabItemSingle",false)
      EnableTrigger("abortSort",false)
      -- If doing a full set, move on to the next piece
      delay = delay + 3
      if (#sortWearables > 0) then DoAfterSpecial(delay,"sortnext",10) end
   end
end

function unbagEq(name, line, wildcards)
   -- Pull EQ set from a bag
   local prefix = wildcards[1]
   local bag = wildcards[2]
   for i,w in ipairs(wearables) do
      Send("take "..prefix..w.." "..bag)
   end
end

function bagEq(name, line, wildcards)
   -- Put EQ set into a bag
   local prefix = wildcards[1]
   local bag = wildcards[2]
   for i,w in ipairs(wearables) do
      Send("take "..prefix..w.." "..bag)
   end
end

function sortNextWearable()
   if #sortWearables == 0 then Note("No items remaining to sort") return end
   local nextLoc = table.remove(sortWearables,1) --Sure, it's expensive to pull the first item
   Execute("sorteq "..sortPrefix..nextLoc.." "..sortBag)
   if #sortWearables == 0 then DoAfterSpecial(3,"SortEq: Last item completed.",2) return end
end

function sortEqSet(name, line, wildcards)
   -- Sort full set in a bag
   sortPrefix = wildcards[1]
   sortBag = wildcards[2]
   -- Reset our list of items to sort -- Lua sucks and can't clone a list
   sortWearables = {}
   for i,w in ipairs(uniqueWearables) do
      table.insert(sortWearables,w)
   end
   sortNextWearable()
end

function cancelSortEq()
   Note("SortEq: Sort task aborted")
   sortWearables = {} --Just clear the list of pending pieces
end

]]>
</script> 

</muclient>
